import smtplib
from crewai.tools import BaseTool
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
from pydantic import BaseModel, Field
import logging
from dotenv import load_dotenv

load_dotenv()

# Configure logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailInput(BaseModel):
    to_email: str = Field(..., description="Recipient's email address")
    subject: str = Field(..., description="Email Subject")
    body: str = Field(..., description="Email Body Content")
    attachment_path: str = Field(None, description="Optional Path to attach the file")

class SendEmailTool(BaseTool):
    name: str = "Send Email"
    description: str = "Send Email of blogs generated by the application"
    args_schema: type[BaseModel] = EmailInput

    def _run(self, to_email, subject, body, attachment_path: None):
        """
        Sends an email with optional attachment using SMTP.
        """
        try:
            smtp_server = "smtp.gmail.com"
            smtp_port = 587
            sender_email = os.getenv("EMAIL_ADDRESS")
            sender_password = os.getenv("EMAIL_PASSWORD")

            # Check for required environment variables
            if not sender_email or not sender_password:
                logger.error("Email Address or Email Password not found in environment variables")
                return "ERROR: Email Address or Email Password not found in environment variables"
            
            logger.info("Preparing email message")
            msg = MIMEMultipart()
            msg["From"] = sender_email
            msg["To"] = to_email
            msg["subject"] = subject

            # Attach the email body
            msg.attach(MIMEText(body, "plain"))

            # If attachment_path is provided, attach the file
            if attachment_path:
                logger.info(f"Attaching file: {attachment_path}")
                try:
                    with open(attachment_path, "rb") as attachment:
                        part = MIMEBase("application", "octet-stream")
                        part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition",
                        f"attachment; filename={os.path.basename(attachment_path)}",
                    )
                    msg.attach(part)
                except Exception as e:
                    logger.error(f"Failed to attach file: {e}")
                    return f"ERROR: Failed to attach file: {e}"

            # Connect to SMTP server and send email
            logger.info("Connecting to SMTP server")
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            logger.info("Logging in to SMTP server")
            server.login(sender_email, sender_password)
            text = msg.as_string()
            logger.info("Sending email")
            server.sendmail(sender_email, to_email, text)
            server.quit()
            logger.info("Email sent successfully")

        except Exception as e:
            error_msg = f"Failed to send email: {e}"
            logger.error(error_msg)
            return error_msg
